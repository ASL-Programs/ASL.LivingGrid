@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="login-form">
    <EditForm Model="loginModel" OnValidSubmit="HandleLoginAsync" FormName="login">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />
        
        <div class="form-group mb-3">
            <label for="email" class="form-label">Email</label>
            <InputText @bind-Value="loginModel.Email" class="form-control" id="email" autocomplete="username" placeholder="admin@asl.az" />
            <ValidationMessage For="() => loginModel.Email" class="text-danger" />
        </div>
        
        <div class="form-group mb-3">
            <label for="password" class="form-label">Password</label>
            <InputText type="password" @bind-Value="loginModel.Password" class="form-control" id="password" autocomplete="current-password" placeholder="••••••••" />
            <ValidationMessage For="() => loginModel.Password" class="text-danger" />
        </div>
        
        <div class="form-check mb-3">
            <InputCheckbox @bind-Value="loginModel.RememberMe" class="form-check-input" id="remember" />
            <label class="form-check-label" for="remember">Remember me</label>
        </div>
        
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                @errorMessage
            </div>
        }
        
        <button type="submit" class="btn btn-primary w-100" disabled="@isLoggingIn">
            @if (isLoggingIn)
            {
                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                <text>Logging in...</text>
            }
            else
            {
                <text>Login</text>
            }
        </button>
    </EditForm>
    
    <hr class="my-4" />
    
    <div class="text-center">
        <small class="text-muted">
            Default admin: admin@asl.az / admin123
        </small>
    </div>
</div>

@code {
    private LoginModel loginModel = new() { Email = "admin@asl.az" };
    private string? errorMessage;
    private bool isLoggingIn = false;

    protected override async Task OnInitializedAsync()
    {
        // Create default admin user if not exists
        await EnsureDefaultAdminUserAsync();
    }

    private async Task HandleLoginAsync()
    {
        isLoggingIn = true;
        errorMessage = null;
        
        try
        {
            var result = await SignInManager.PasswordSignInAsync(
                loginModel.Email, 
                loginModel.Password, 
                loginModel.RememberMe, 
                lockoutOnFailure: false);

            if (result.Succeeded)
            {
                Navigation.NavigateTo("/", true);
            }
            else
            {
                errorMessage = "Invalid email or password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during login. Please try again.";
        }
        finally
        {
            isLoggingIn = false;
        }
    }

    private async Task EnsureDefaultAdminUserAsync()
    {
        try
        {
            var adminUser = await UserManager.FindByEmailAsync("admin@asl.az");
            if (adminUser == null)
            {
                adminUser = new IdentityUser
                {
                    UserName = "admin@asl.az",
                    Email = "admin@asl.az",
                    EmailConfirmed = true
                };

                var result = await UserManager.CreateAsync(adminUser, "admin123");
                if (!result.Succeeded)
                {
                    // Log errors if needed
                }
            }
        }
        catch
        {
            // Silently handle errors during user creation
        }
    }

    public class LoginModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        public bool RememberMe { get; set; }
    }
}

<style>
    .login-form {
        max-width: 400px;
        margin: 0 auto;
    }

    .form-control:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
    }

    .btn-primary {
        background-color: #667eea;
        border-color: #667eea;
    }

    .btn-primary:hover {
        background-color: #5a6fd8;
        border-color: #5a6fd8;
    }
</style>
