@page "/"
@using Microsoft.AspNetCore.Authorization
@using ASL.LivingGrid.WebAdminPanel.Services
@using ASL.LivingGrid.WebAdminPanel
@using System.Globalization
@attribute [Authorize]
@inject IConfigurationService ConfigurationService
@inject ILocalizationService LocalizationService
@inject IJSRuntime JS

<PageTitle>Dashboard - ASL LivingGrid</PageTitle>

<div class="dashboard">
    <div class="row">
        <div class="col-12">
            <h1 class="display-4">@localizedStrings["Common.Welcome"]</h1>
            <p class="lead">ASL LivingGrid Web Admin Panel</p>
        </div>
    </div>
    
    <div class="row mt-4">
        <div class="col-md-3">
            <div class="card text-white bg-primary">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4 class="card-title">@systemStats.TotalUsers</h4>
                            <p class="card-text">Total Users</p>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-users fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-3">
            <div class="card text-white bg-success">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4 class="card-title">@systemStats.TotalCompanies</h4>
                            <p class="card-text">Companies</p>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-building fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-3">
            <div class="card text-white bg-warning">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4 class="card-title">@systemStats.ActiveSessions</h4>
                            <p class="card-text">Active Sessions</p>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-users-cog fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-3">
            <div class="card text-white bg-info">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4 class="card-title">@systemStats.TotalEvents</h4>
                            <p class="card-text">System Events</p>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-chart-line fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row mt-4">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">Recent Activity</h5>
                </div>
                <div class="card-body">
                    @if (recentActivities.Any())
                    {
                        <div class="list-group list-group-flush">
                            @foreach (var activity in recentActivities)
                            {
                                <div class="list-group-item d-flex justify-content-between align-items-start">
                                    <div class="ms-2 me-auto">
                                        <div class="fw-bold">@activity.Action</div>
                                        <small class="text-muted">@activity.UserName - @activity.Timestamp.ToString("yyyy-MM-dd HH:mm")"</small>
                                    </div>
                                    <span class="badge bg-primary rounded-pill">@activity.EntityType</span>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">No recent activity.</p>
                    }
                </div>
            </div>
        </div>
        
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">System Information</h5>
                </div>
                <div class="card-body">
                    <dl class="row">
                        <dt class="col-sm-5">Version:</dt>
                        <dd class="col-sm-7">@systemInfo.Version</dd>
                        
                        <dt class="col-sm-5">Uptime:</dt>
                        <dd class="col-sm-7">@systemInfo.Uptime</dd>
                        
                        <dt class="col-sm-5">Database:</dt>
                        <dd class="col-sm-7">@systemInfo.DatabaseType</dd>
                        
                        <dt class="col-sm-5">Environment:</dt>
                        <dd class="col-sm-7">@systemInfo.Environment</dd>
                    </dl>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private Dictionary<string, string> localizedStrings = new();
    private SystemStats systemStats = new();
    private SystemInfo systemInfo = new();
    private List<Models.AuditLog> recentActivities = new();

    protected override async Task OnInitializedAsync()
    {
        // Determine culture from browser or user preferences
        var culture = CultureInfo.CurrentUICulture?.Name;
        if (string.IsNullOrWhiteSpace(culture))
            culture = "az";

        // Load localized strings
        localizedStrings = await LocalizationService.GetAllStringsAsync(culture);
        
        // Add default strings if not exists
        if (!localizedStrings.ContainsKey("Common.Welcome"))
        {
            localizedStrings.Add("Common.Welcome", "Xoş gəlmisiniz");
        }

        // Load system statistics (mock data for now)
        systemStats = new SystemStats
        {
            TotalUsers = 15,
            TotalCompanies = 3,
            ActiveSessions = 8,
            TotalEvents = 1247
        };

        // Load system information
        systemInfo = new SystemInfo
        {
            Version = "1.0.0",
            Uptime = GetUptimeString(),
            DatabaseType = "SQLite",
            Environment = "Development"
        };

        // Load recent activities (this would come from AuditService in real implementation)
        recentActivities = new List<Models.AuditLog>
        {
            new() { Action = "User Login", UserName = "sample@demo", EntityType = "User", Timestamp = DateTime.Now.AddMinutes(-5) },
            new() { Action = "Configuration Updated", UserName = "sample@demo", EntityType = "Config", Timestamp = DateTime.Now.AddMinutes(-15) },
            new() { Action = "Company Created", UserName = "sample@demo", EntityType = "Company", Timestamp = DateTime.Now.AddHours(-1) }
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("toast.show", localizedStrings["Common.Welcome"]);
        }
    }

    private string GetUptimeString()
    {
        var uptime = DateTime.Now - Program.StartTime;
        return $"{uptime.Days}d {uptime.Hours}h {uptime.Minutes}m";
    }

    public class SystemStats
    {
        public int TotalUsers { get; set; }
        public int TotalCompanies { get; set; }
        public int ActiveSessions { get; set; }
        public int TotalEvents { get; set; }
    }

    public class SystemInfo
    {
        public string Version { get; set; } = "";
        public string Uptime { get; set; } = "";
        public string DatabaseType { get; set; } = "";
        public string Environment { get; set; } = "";
    }
}

<style>
    .dashboard .card {
        transition: transform 0.2s;
    }

    .dashboard .card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .list-group-item {
        border-left: none;
        border-right: none;
    }

    .list-group-item:first-child {
        border-top: none;
    }

    .list-group-item:last-child {
        border-bottom: none;
    }
</style>
