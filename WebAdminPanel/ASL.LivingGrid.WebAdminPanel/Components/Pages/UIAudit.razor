@page "/uiaudit"
@using System.Text.Json
@inject IJSRuntime JS

<PageTitle>UI Audit</PageTitle>

<h3>UI Accessibility Audit</h3>
<p>This tool scans the current page for basic accessibility issues.</p>

<button class="btn btn-primary" @onclick="RunAudit">Run Audit</button>

@if (issues != null)
{
    <div class="mt-3">
        <h5>Issues (@issues.Count)</h5>
        @if (issues.Count == 0)
        {
            <p class="text-success">No issues found.</p>
        }
        else
        {
            <ul class="list-group">
                @foreach (var issue in issues)
                {
                    <li class="list-group-item">
                        <strong>@issue.Type:</strong> @issue.Message
                    </li>
                }
            </ul>
        }
    </div>
}

@code {
    private List<AuditIssue>? issues;

    private async Task RunAudit()
    {
        issues = new List<AuditIssue>();
        await JS.InvokeVoidAsync("uiAudit.runAudit", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public void OnAuditCompleted(object report)
    {
        var json = JsonSerializer.Serialize(report);
        issues = JsonSerializer.Deserialize<List<AuditIssue>>(json);
        StateHasChanged();
    }

    public class AuditIssue
    {
        public string Type { get; set; } = string.Empty;
        public string Message { get; set; } = string.Empty;
    }
}
