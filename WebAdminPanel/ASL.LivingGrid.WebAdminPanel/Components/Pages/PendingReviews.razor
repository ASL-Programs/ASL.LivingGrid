@page "/pendingreviews"
@using ASL.LivingGrid.WebAdminPanel.Models
@using System.Net.Http.Json
@inject ITranslationWorkflowService WorkflowService
@inject HttpClient Http

<PageTitle>Pending Reviews</PageTitle>

<h3>Pending Translation Reviews</h3>

@if (requests == null)
{
    <p>Loading...</p>
}
else if (!requests.Any())
{
    <p>No pending requests.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Key</th>
                <th>Proposed</th>
                <th>Culture</th>
                <th>Requested By</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var r in requests)
            {
                <tr>
                    <td>@r.Key</td>
                    <td>@r.ProposedValue</td>
                    <td>@r.Culture</td>
                    <td>@r.RequestedBy</td>
                    <td>
                        <button class="btn btn-sm btn-success me-2" @onclick="() => Approve(r.Id)">Approve</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => Reject(r.Id)">Reject</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<TranslationRequest>? requests;

    protected override async Task OnInitializedAsync()
    {
        requests = (await WorkflowService.GetPendingRequestsAsync()).ToList();
    }

    private async Task Approve(Guid id)
    {
        await Http.PostAsync($"/api/translationrequests/approve/{id}", null);
        if (requests is not null)
            requests.RemoveAll(r => r.Id == id);
    }

    private async Task Reject(Guid id)
    {
        var payload = new TranslationReviewRequest { Accept = false };
        await Http.PostAsJsonAsync($"/api/translationrequests/reject/{id}", payload);
        if (requests is not null)
            requests.RemoveAll(r => r.Id == id);
    }
}

