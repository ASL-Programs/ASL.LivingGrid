@using Microsoft.AspNetCore.Components.Authorization
@using ASL.LivingGrid.WebAdminPanel.Services
@using ASL.LivingGrid.WebAdminPanel.Models
@using ASL.LivingGrid.WebAdminPanel.Components.Search
@inject ILocalizationService LocalizationService
@inject INavigationService NavService
@inject NavigationManager Navigation
@inject IFavoritesService FavService
@inject IRoleBasedUiService RoleUi

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="/">ASL LivingGrid</a>
    </div>
</div>


<button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#sidebarMenu" aria-controls="sidebarMenu" aria-expanded="false" aria-label="Toggle navigation">
    <span class="navbar-toggler-icon"></span>
</button>

<div id="sidebarMenuContent" class="nav-scrollable collapse show">
    <nav class="flex-column">
        <div class="nav-item p-3">
            <SearchBox OnQueryChanged="OnSearch" />
        </div>
        @if (favoriteKeys.Count > 0)
        {
            <div class="nav-item px-3 text-muted">Favorites</div>
            @foreach (var fav in favoriteKeys)
            {
                var favItem = FindItem(menuItems, fav);
                if (favItem != null)
                {
                    <MenuItemView Item="favItem" L="localizedStrings" Favorites="favoriteKeys" OnFavoriteToggle="ToggleFavorite" />
                }
            }
            <hr />
        }
        @foreach (var item in filteredMenu)
        {
            <MenuItemView Item="item" L="localizedStrings" Favorites="favoriteKeys" OnFavoriteToggle="ToggleFavorite" />
        }
        <div class="nav-item p-3">
            <select class="form-select" @onchange="SimulateRole">
                <option value="">@("-- " + (simulationRole ?? "Real") + " --")</option>
                <option value="Admin">Admin</option>
                <option value="Manager">Manager</option>
                <option value="Designer">Designer</option>
            </select>
        </div>
    </nav>
</div>

@code {
    private Dictionary<string, string> localizedStrings = new();
    private IEnumerable<NavigationItem> menuItems = Enumerable.Empty<NavigationItem>();
    private IEnumerable<NavigationItem> filteredMenu = Enumerable.Empty<NavigationItem>();
    private HashSet<string> favoriteKeys = new();
    private string searchQuery = string.Empty;
    private string? simulationRole;

    protected override async Task OnInitializedAsync()
    {
        localizedStrings = await LocalizationService.GetAllStringsAsync("az"); // Default to Azerbaijani
        if (!localizedStrings.ContainsKey("Navigation.Dashboard"))
        {
            localizedStrings["Navigation.Dashboard"] = "İdarə paneli";
            localizedStrings["Navigation.Companies"] = "Şirkətlər";
            localizedStrings["Navigation.Users"] = "İstifadəçilər";
            localizedStrings["Navigation.Roles"] = "Rollar";
            localizedStrings["Navigation.Settings"] = "Ayarlar";
            localizedStrings["Navigation.Audit"] = "Audit";
            localizedStrings["Navigation.Notifications"] = "Bildirişlər";
            localizedStrings["Navigation.Plugins"] = "Pluginlər";
            localizedStrings["Navigation.UIAudit"] = "UI Audit";
            // Newly added menu items
            localizedStrings["Navigation.ThemeMarketplace"] = "Tema Bazarı";
            localizedStrings["Navigation.LayoutMarketplace"] = "Düzən Bazarı";
            localizedStrings["Navigation.VisualEditor"] = "Vizual Redaktor";
            localizedStrings["Navigation.PendingReviews"] = "Tərcümə Baxışı";
            localizedStrings["Navigation.LocalizationCoverage"] = "Tərcümə Örtüyü";
            localizedStrings["Navigation.TemplateOverrides"] = "Şablon Override";
            localizedStrings["Navigation.TerminologyOverrides"] = "Termin Override";
        }

        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        menuItems = await NavService.GetMenuItemsAsync(user);
        filteredMenu = menuItems;
        var favs = await FavService.GetFavoritesAsync();
        favoriteKeys = new HashSet<string>(favs);
    }

    private async Task SimulateRole(ChangeEventArgs e)
    {
        simulationRole = e.Value?.ToString();
        RoleUi.SetSimulationRole(simulationRole);
        await OnInitializedAsync();
        StateHasChanged();
    }

    private async Task ToggleFavorite(string key)
    {
        if (favoriteKeys.Contains(key))
        {
            favoriteKeys.Remove(key);
            await FavService.RemoveFavoriteAsync(key);
        }
        else
        {
            favoriteKeys.Add(key);
            await FavService.AddFavoriteAsync(key);
        }
    }

    private void OnSearch(string query)
    {
        searchQuery = query;
        filteredMenu = Filter(menuItems, searchQuery);
    }

    private IEnumerable<NavigationItem> Filter(IEnumerable<NavigationItem> items, string query)
    {
        if (string.IsNullOrWhiteSpace(query))
            return items;
        var result = new List<NavigationItem>();
        foreach (var item in items)
        {
            var text = localizedStrings.GetValueOrDefault(item.Key, item.Key);
            var childFiltered = item.Children is null ? null : Filter(item.Children, query).ToList();
            if (text.Contains(query, StringComparison.OrdinalIgnoreCase) || (childFiltered?.Any() ?? false))
            {
                result.Add(new NavigationItem
                {
                    Key = item.Key,
                    Url = item.Url,
                    Icon = item.Icon,
                    Children = childFiltered?.ToList()
                });
            }
        }
        return result;
    }

    private NavigationItem? FindItem(IEnumerable<NavigationItem> items, string key)
    {
        foreach (var item in items)
        {
            if (item.Key == key) return item;
            if (item.Children is not null)
            {
                var found = FindItem(item.Children, key);
                if (found != null) return found;
            }
        }
        return null;
    }
}
