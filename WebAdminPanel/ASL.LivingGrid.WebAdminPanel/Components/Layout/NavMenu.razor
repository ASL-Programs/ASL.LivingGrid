@using Microsoft.AspNetCore.Components.Authorization
@using ASL.LivingGrid.WebAdminPanel.Services
@using ASL.LivingGrid.WebAdminPanel.Models
@inject ILocalizationService LocalizationService
@inject INavigationService NavService
@inject IRoleBasedUiService RoleUi
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="/">ASL LivingGrid</a>
    </div>
</div>

<button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#sidebarMenuContent" aria-controls="sidebarMenuContent" aria-expanded="false" aria-label="Toggle navigation">
    <span class="navbar-toggler-icon"></span>
</button>

<div id="sidebarMenuContent" class="nav-scrollable collapse show">
    <nav class="flex-column">
        @foreach (var item in menuItems)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="@item.Url" Match="NavLinkMatch.Prefix">
                    <span class="@item.Icon" aria-hidden="true"></span> @localizedStrings[item.Key]
                </NavLink>
            </div>
        }
        <div class="nav-item p-3">
            <select class="form-select" @onchange="SimulateRole">
                <option value="">@("-- " + (simulationRole ?? "Real") + " --")</option>
                <option value="Admin">Admin</option>
                <option value="Manager">Manager</option>
                <option value="Designer">Designer</option>
            </select>
        </div>
    </nav>
</div>

@code {
    private Dictionary<string, string> localizedStrings = new();
    private IEnumerable<NavigationItem> menuItems = Enumerable.Empty<NavigationItem>();
    private string? simulationRole;

    protected override async Task OnInitializedAsync()
    {
        localizedStrings = await LocalizationService.GetAllStringsAsync("az"); // Default to Azerbaijani
        if (!localizedStrings.ContainsKey("Navigation.Dashboard"))
        {
            localizedStrings["Navigation.Dashboard"] = "İdarə paneli";
            localizedStrings["Navigation.Companies"] = "Şirkətlər";
            localizedStrings["Navigation.Users"] = "İstifadəçilər";
            localizedStrings["Navigation.Roles"] = "Rollar";
            localizedStrings["Navigation.Settings"] = "Ayarlar";
            localizedStrings["Navigation.Audit"] = "Audit";
            localizedStrings["Navigation.Notifications"] = "Bildirişlər";
            localizedStrings["Navigation.Plugins"] = "Pluginlər";
            localizedStrings["Navigation.UIAudit"] = "UI Audit";
            localizedStrings["Navigation.ThemeMarketplace"] = "Tema Bazarı";
            localizedStrings["Navigation.LayoutMarketplace"] = "Düzən Bazarı";
            localizedStrings["Navigation.VisualEditor"] = "Vizual Redaktor";
            localizedStrings["Navigation.PendingReviews"] = "Tərcümə Baxışı";
        }

        var allItems = await NavService.GetMenuItemsAsync();
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var list = new List<NavigationItem>();
        foreach (var item in allItems)
        {
            if (await RoleUi.HasAccessAsync(item.Key, user))
            {
                list.Add(item);
            }
        }
        menuItems = list;
    }

    private async Task SimulateRole(ChangeEventArgs e)
    {
        simulationRole = e.Value?.ToString();
        RoleUi.SetSimulationRole(simulationRole);
        await OnInitializedAsync();
        StateHasChanged();
    }
}
